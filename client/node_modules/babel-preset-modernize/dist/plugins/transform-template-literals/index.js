"use strict";exports.__esModule=true;exports.default=transformTemplateLiterals;function transformTemplateLiterals({types:t}){const esc=str=>str.replace(/(`|${)/g,"\\$1");const isConcat=callee=>t.isMemberExpression(callee)&&t.isIdentifier(callee.node.property,{name:"concat"});const isStringConcat=p=>t.isCallExpression(p)&&isConcat(p.get("callee"));return{name:"transform-template-literals",visitor:{BinaryExpression(path){if(path.node.operator!=="+")return;if(t.isBinaryExpression(path.parent))return;let p=path;const segments=[];while(p&&p.isBinaryExpression()){segments.push(p.get("right"));p=p.get("left")}if(p)segments.push(p);segments.reverse();if(segments.length<2)return;const tpls=[];const exprs=[];let str="";let inString=true;let hasExpression=false;for(let i=0;i<segments.length;i++){const isLast=i===segments.length-1;const p=segments[i];const isString=p.isStringLiteral();if(isString){str+=p.node.value;inString=true}else{if(!inString){return}tpls.push(t.templateElement({raw:esc(str)},isLast));exprs.push(t.clone(p.node));hasExpression=true;inString=false;str=""}}if(!hasExpression){return}tpls.push(t.templateElement({raw:esc(str)},true));path.replaceWith(t.templateLiteral(tpls,exprs))},CallExpression(path){const callee=path.get("callee");if(!isConcat(callee))return;const str=callee.get("object");if(!t.isStringLiteral(str))return;const tpls=[t.templateElement({raw:esc(str.node.value)})];const exprs=[];const concats=[path.get("arguments")];let rootPath=path;let p=path;while(p=p.parentPath&&p.parentPath.parentPath){if(isStringConcat(p)){const obj=p.get("callee.object");if(obj!==rootPath&&!t.isStringLiteral(obj))break;concats.push(p.get("arguments"));rootPath=p}}if(concats.length===1&&concats[0].length===0)return;for(let n=0;n<concats.length;n++){const args=concats[n];const isLast=n===concats.length-1;for(let i=0;i<args.length;i++){const node=args[i].node;if(i%2){if(!t.isStringLiteral(node)){return}const tail=isLast&&i===args.length-1;tpls.push(t.templateElement({raw:esc(node.value)},tail))}else if(t.isExpression(node)){exprs.push(t.clone(node))}}if(tpls.length<=exprs.length){tpls.push(t.templateElement({raw:""},isLast))}}rootPath.replaceWith(t.templateLiteral(tpls,exprs))}}}}module.exports=exports.default;