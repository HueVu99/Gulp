"use strict";exports.__esModule=true;exports.default=void 0;var _default=({types:t})=>({name:"transform-umd-to-cjs",visitor:{Program:{enter(path,state){const expressions=path.get("body").filter(t.isStatement);if(expressions.length!==1)return;let expr=expressions[0];if(!t.isExpressionStatement(expr))return;expr=expr.get("expression");if(t.isUnaryExpression(expr)&&expr.node.operator==="!"){expr=expr.get("argument")}if(!t.isCallExpression(expr))return;const umd=expr;const factoryArgPosition=umd.get("arguments").findIndex(t.isFunctionExpression);if(factoryArgPosition===-1){return}const bootstrap=umd.get("callee");if(!t.isFunctionExpression(bootstrap))return;const param=bootstrap.get("params."+factoryArgPosition);let moduleExports;const binding=param.scope.getBinding(param.node.name);const ref=binding.referencePaths.find(p=>{if(!t.isCallExpression(p.parentPath))return false;const root=p.parentPath.parentPath;if(!t.isAssignmentExpression(root))return false;const lhs=root.get("left");if(!t.isMemberExpression(lhs)||lhs.node.object.name!=="module"||lhs.node.property.name!=="exports"){return false}moduleExports=t.clone(lhs.node);return true});const paramNames=umd.get("arguments."+factoryArgPosition+".params");const args=[];let i=0;for(const arg of ref.parentPath.get("arguments")){const param=paramNames[i++];let tmp=param.node.name;if(path.scope.hasBinding(tmp)){tmp=path.scope.generateUidBasedOnNode(arg.node.arguments[0])}args.push(tmp);const decl=t.variableDeclaration("const",[t.variableDeclarator(t.identifier(tmp),t.clone(arg.node))]);path.unshiftContainer("body",decl)}const factory=umd.get("arguments."+factoryArgPosition);const returnStatement=factory.get("body.body").find(t.isReturnStatement);if(returnStatement){returnStatement.replaceWith(t.assignmentExpression("=",t.clone(moduleExports),t.clone(returnStatement.node.argument)))}expressions[0].replaceWithMultiple(factory.node.body.body.map(t.clone))}}}});exports.default=_default;module.exports=exports.default;